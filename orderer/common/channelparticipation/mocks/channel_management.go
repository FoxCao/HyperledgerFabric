// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	cb "github.com/hyperledger/fabric-protos-go/common"
	"github.com/hyperledger/fabric/orderer/common/channelparticipation"
	"github.com/hyperledger/fabric/orderer/common/types"
)

type ChannelManagement struct {
	ChannelListStub        func() types.ChannelList
	channelListMutex       sync.RWMutex
	channelListArgsForCall []struct{}
	channelListReturns     struct {
		result1 types.ChannelList
	}
	channelListReturnsOnCall map[int]struct {
		result1 types.ChannelList
	}
	ChannelInfoStub        func(channelID string) (types.ChannelInfo, error)
	channelInfoMutex       sync.RWMutex
	channelInfoArgsForCall []struct {
		channelID string
	}
	channelInfoReturns struct {
		result1 types.ChannelInfo
		result2 error
	}
	channelInfoReturnsOnCall map[int]struct {
		result1 types.ChannelInfo
		result2 error
	}
	JoinChannelStub        func(channelID string, configBlock *cb.Block, isAppChannel bool) (types.ChannelInfo, error)
	joinChannelMutex       sync.RWMutex
	joinChannelArgsForCall []struct {
		channelID    string
		configBlock  *cb.Block
		isAppChannel bool
	}
	joinChannelReturns struct {
		result1 types.ChannelInfo
		result2 error
	}
	joinChannelReturnsOnCall map[int]struct {
		result1 types.ChannelInfo
		result2 error
	}
	RemoveChannelStub        func(channelID string) error
	removeChannelMutex       sync.RWMutex
	removeChannelArgsForCall []struct {
		channelID string
	}
	removeChannelReturns struct {
		result1 error
	}
	removeChannelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChannelManagement) ChannelList() types.ChannelList {
	fake.channelListMutex.Lock()
	ret, specificReturn := fake.channelListReturnsOnCall[len(fake.channelListArgsForCall)]
	fake.channelListArgsForCall = append(fake.channelListArgsForCall, struct{}{})
	fake.recordInvocation("ChannelList", []interface{}{})
	fake.channelListMutex.Unlock()
	if fake.ChannelListStub != nil {
		return fake.ChannelListStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.channelListReturns.result1
}

func (fake *ChannelManagement) ChannelListCallCount() int {
	fake.channelListMutex.RLock()
	defer fake.channelListMutex.RUnlock()
	return len(fake.channelListArgsForCall)
}

func (fake *ChannelManagement) ChannelListReturns(result1 types.ChannelList) {
	fake.ChannelListStub = nil
	fake.channelListReturns = struct {
		result1 types.ChannelList
	}{result1}
}

func (fake *ChannelManagement) ChannelListReturnsOnCall(i int, result1 types.ChannelList) {
	fake.ChannelListStub = nil
	if fake.channelListReturnsOnCall == nil {
		fake.channelListReturnsOnCall = make(map[int]struct {
			result1 types.ChannelList
		})
	}
	fake.channelListReturnsOnCall[i] = struct {
		result1 types.ChannelList
	}{result1}
}

func (fake *ChannelManagement) ChannelInfo(channelID string) (types.ChannelInfo, error) {
	fake.channelInfoMutex.Lock()
	ret, specificReturn := fake.channelInfoReturnsOnCall[len(fake.channelInfoArgsForCall)]
	fake.channelInfoArgsForCall = append(fake.channelInfoArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("ChannelInfo", []interface{}{channelID})
	fake.channelInfoMutex.Unlock()
	if fake.ChannelInfoStub != nil {
		return fake.ChannelInfoStub(channelID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.channelInfoReturns.result1, fake.channelInfoReturns.result2
}

func (fake *ChannelManagement) ChannelInfoCallCount() int {
	fake.channelInfoMutex.RLock()
	defer fake.channelInfoMutex.RUnlock()
	return len(fake.channelInfoArgsForCall)
}

func (fake *ChannelManagement) ChannelInfoArgsForCall(i int) string {
	fake.channelInfoMutex.RLock()
	defer fake.channelInfoMutex.RUnlock()
	return fake.channelInfoArgsForCall[i].channelID
}

func (fake *ChannelManagement) ChannelInfoReturns(result1 types.ChannelInfo, result2 error) {
	fake.ChannelInfoStub = nil
	fake.channelInfoReturns = struct {
		result1 types.ChannelInfo
		result2 error
	}{result1, result2}
}

func (fake *ChannelManagement) ChannelInfoReturnsOnCall(i int, result1 types.ChannelInfo, result2 error) {
	fake.ChannelInfoStub = nil
	if fake.channelInfoReturnsOnCall == nil {
		fake.channelInfoReturnsOnCall = make(map[int]struct {
			result1 types.ChannelInfo
			result2 error
		})
	}
	fake.channelInfoReturnsOnCall[i] = struct {
		result1 types.ChannelInfo
		result2 error
	}{result1, result2}
}

func (fake *ChannelManagement) JoinChannel(channelID string, configBlock *cb.Block, isAppChannel bool) (types.ChannelInfo, error) {
	fake.joinChannelMutex.Lock()
	ret, specificReturn := fake.joinChannelReturnsOnCall[len(fake.joinChannelArgsForCall)]
	fake.joinChannelArgsForCall = append(fake.joinChannelArgsForCall, struct {
		channelID    string
		configBlock  *cb.Block
		isAppChannel bool
	}{channelID, configBlock, isAppChannel})
	fake.recordInvocation("JoinChannel", []interface{}{channelID, configBlock, isAppChannel})
	fake.joinChannelMutex.Unlock()
	if fake.JoinChannelStub != nil {
		return fake.JoinChannelStub(channelID, configBlock, isAppChannel)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.joinChannelReturns.result1, fake.joinChannelReturns.result2
}

func (fake *ChannelManagement) JoinChannelCallCount() int {
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	return len(fake.joinChannelArgsForCall)
}

func (fake *ChannelManagement) JoinChannelArgsForCall(i int) (string, *cb.Block, bool) {
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	return fake.joinChannelArgsForCall[i].channelID, fake.joinChannelArgsForCall[i].configBlock, fake.joinChannelArgsForCall[i].isAppChannel
}

func (fake *ChannelManagement) JoinChannelReturns(result1 types.ChannelInfo, result2 error) {
	fake.JoinChannelStub = nil
	fake.joinChannelReturns = struct {
		result1 types.ChannelInfo
		result2 error
	}{result1, result2}
}

func (fake *ChannelManagement) JoinChannelReturnsOnCall(i int, result1 types.ChannelInfo, result2 error) {
	fake.JoinChannelStub = nil
	if fake.joinChannelReturnsOnCall == nil {
		fake.joinChannelReturnsOnCall = make(map[int]struct {
			result1 types.ChannelInfo
			result2 error
		})
	}
	fake.joinChannelReturnsOnCall[i] = struct {
		result1 types.ChannelInfo
		result2 error
	}{result1, result2}
}

func (fake *ChannelManagement) RemoveChannel(channelID string) error {
	fake.removeChannelMutex.Lock()
	ret, specificReturn := fake.removeChannelReturnsOnCall[len(fake.removeChannelArgsForCall)]
	fake.removeChannelArgsForCall = append(fake.removeChannelArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("RemoveChannel", []interface{}{channelID})
	fake.removeChannelMutex.Unlock()
	if fake.RemoveChannelStub != nil {
		return fake.RemoveChannelStub(channelID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeChannelReturns.result1
}

func (fake *ChannelManagement) RemoveChannelCallCount() int {
	fake.removeChannelMutex.RLock()
	defer fake.removeChannelMutex.RUnlock()
	return len(fake.removeChannelArgsForCall)
}

func (fake *ChannelManagement) RemoveChannelArgsForCall(i int) string {
	fake.removeChannelMutex.RLock()
	defer fake.removeChannelMutex.RUnlock()
	return fake.removeChannelArgsForCall[i].channelID
}

func (fake *ChannelManagement) RemoveChannelReturns(result1 error) {
	fake.RemoveChannelStub = nil
	fake.removeChannelReturns = struct {
		result1 error
	}{result1}
}

func (fake *ChannelManagement) RemoveChannelReturnsOnCall(i int, result1 error) {
	fake.RemoveChannelStub = nil
	if fake.removeChannelReturnsOnCall == nil {
		fake.removeChannelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeChannelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ChannelManagement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.channelListMutex.RLock()
	defer fake.channelListMutex.RUnlock()
	fake.channelInfoMutex.RLock()
	defer fake.channelInfoMutex.RUnlock()
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	fake.removeChannelMutex.RLock()
	defer fake.removeChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChannelManagement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ channelparticipation.ChannelManagement = new(ChannelManagement)
